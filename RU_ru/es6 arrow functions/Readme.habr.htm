<!-- 

 tutorial: true
     hubs: JavaScript, Веб-разработка
    title: Стрелочные функции (Arrow functions) в ECMAScript 6
     tags: javascript, ecmascript 6, ecmascript harmony
	 
 --><img align="right" alt="Arrow functions madness" src="http://habrastorage.org/files/b2f/e49/a40/b2fe49a40695402d8cf3c4ff016df5ba.png" title="Arrow functions madness" />
Одной из самых интересных частей нового стандарта ECMAScript 6 являются стрелочные функции. Стрелочные функции, как и понятно по названию определяются новым синтаксисом, который использует стрелку <code>=&gt;</code>. Однако, помимо отличного синтаксиса, стрелочные функции отличаются от традиционных функций и в некоторых моментах:
<ul>
<li>Лексическое связывание - значения <em>специальных переменных</em> <strong>this</strong>, <strong>super</strong> и <strong>arguments</strong>  определяются не тем, как стрелочные функции были вызваны, а тем, как они были созданы.</li>
<li>Неизменяемые <strong>this</strong>, <strong>super</strong> и <strong>arguments</strong> - Значения этих переменных внутри стрелочные функции остаются неизменными на протяжении всего жизненного цикла функции.</li>
<li>Стрелочные функции не могут быть использованы как конструктор и кидают ошибку при использовании с оператором <strong>new</strong>.</li>
<li>Недоступность "собственного" значения переменной <strong>arguments</strong>.</li>
</ul>
<p>Было несколько причин для введения этих отличий. Первоочередная - это то, что связывание (binding) используется довольно часто в JavaScript. Очень легко потерять нужное значение <strong>this</strong> при использовании традиционных функций, что может привести к непредсказуемым последствиям. Другая причина, это то, что JS-движки смогут легко оптимизировать выполнение стрелочных функций, за счет этих ограничений (в противоположность традиционным функциям, которые могут быть использованы в качестве конструктора и которые свободны для модификации <em>специальных переменных</em>).</p>

<habracut text="Подробности" />
<p><em>Примечание: Данная статья - это компиляция из вольного перевода статьи <a href="http://www.nczonline.net/blog/2013/09/10/understanding-ecmascript-6-arrow-functions/">Understanding ECMAScript 6 arrow functions</a> и чтения последнего черновика <a href="http://people.mozilla.org/~jorendorff/es6-draft.html#sec-arrow-function-definitions">спецификации</a> (January 20, 2014 Draft Rev 22).</em></p>

<p><strong>Оглавление</strong></p>
<ul>
<li><a href="#_1">Синтаксис</a><ul>
<li><a href="#_2">Один параметр</a></li>
<li><a href="#_3">Несколько параметров</a></li>
<li><a href="#_4">Без параметров</a></li>
<li><a href="#_5">Традиционный синтаксис тела функции</a></li>
<li><a href="#_6">Литерал объекта</a></li>
<li><a href="#_7">Переменное число параметров</a></li>
<li><a href="#_8">Шаблон деструктуризации в качестве параметра</a></li></ul></li>
<li><a href="#_9">Использование стрелочных функций</a><ul>
<li><a href="#_10">Установка контекста</a></li>
<li><a href="#_11">"Прокидывание" контекста между несколькими вызовами</a></li>
<li><a href="#_12">Использование в качестве аргумента</a></li></ul></li>
<li><a href="#_13">Другие особенности стрелочных функций</a></li>
<li><a href="#_14">Итог</a></li>
</ul>
<br /><anchor>_1</anchor><h2>Синтаксис</h2><hr />
<p>В общем случае, синтаксис стрелочных функций выглядит так:</p>
<br /><source lang="javascript">var fun = (x) =&gt; x;
</source>
<p>Он очень похож на аналогичный синтаксис в таких языках как Scala, CoffeeScript и на синтаксис lambda-выражений из C#.</p>
<br><p>Синтаксис стрелочных функций может быть различен, в зависимости от того, как вы объявляете функцию. Объявление всегда начинается со списка аргументов, далее следует стрелка и тело функции. И список аргументов и тело функции могут иметь различную форму, в зависимости от того, что вы пишете.</p>
<br /><anchor>_2</anchor><h3>Один параметр</h3>
<p>Объявление стрелочной функции, которая принимает один аргумент и просто возвращает его, выглядит очень просто:</p>
<br /><source lang="javascript">var reflect = value =&gt; value;
// эквивалент
var reflect = function(value) { return value; }
</source>
<p>Когда у стрелочной функции только один аргумент, он может быть объявлен без скобок. Следующее после стрелки тело функции также может быть без фигурных скобок и может не содержать ключевого слова <strong>return</strong>.</p>
<br /><anchor>_3</anchor><h3>Несколько параметров</h3>
<p>Но если вы хотите объявить более одного параметра, вы должны обрамить список параметров в круглые скобки:</p>
<br /><source lang="javascript">var sum = (num1, num2) =&gt; num1 + num2;
// эквивалент
var sum = function(num1, num2) { return num1 + num2; };
</source>
<p>Функция <code>sum</code> просто суммирует два аргумента. Единственное отличие от предыдущего примера в наличии круглых скобок и запятой (прямо как в традиционных функциях).</p>
<br /><anchor>_4</anchor><h3>Без параметров</h3>
<p>Аналогично, функция безо всяких аргументов, должна иметь пустой список параметров, обрамлённый в круглые скобки:</p>
<br /><source lang="javascript">var sum = () =&gt; 1 + 2;
// эквивалент
var sum = function() { return 1 + 2; };
</source>
<br /><anchor>_5</anchor><h3>Традиционный синтаксис тела функции</h3>
<p>Вы можете воспользоваться синтаксисом традиционных функций для тела стрелочной функции, когда оно содержит более одного выражения - т.е. обернуть функцию в фигурные скобки и добавить ключевое слово <strong>return</strong>:</p>
<br /><source lang="javascript">var sum = (num1, num2) =&gt; { return num1 + num2; }
// эквивалент
var sum = function(num1, num2) { return num1 + num2; };
</source>
<p>Тело функции будет обработано точно также, как и для классических функций, за исключением того, что значения <em>специальных переменных</em> <strong>this</strong>, <strong>super</strong> и <strong>arguments</strong> будут вычисляться по-другому.</p>
<br /><anchor>_6</anchor><h3 id="_6">Литерал объекта</h3>
<p>Отдельно надо упомянуть, что тело функции которое не содержит фигурных скобок и просто возвращает литерал объекта, должно быть забрано в круглые скобки:</p>
<br /><source lang="javascript">var getTempItem = id =&gt; ({ id: id, name: &quot;Temp&quot; });
// эквивалент
var getTempItem = function(id) { return { id: id, name: &quot;Temp&quot; } };
</source>
<p>Забор литерала объекта в круглые скобки указывает парсеру, что фигурные скобки это не начало традиционного синтаксиса для тела функции, а начало литерала.</p>
<br /><anchor>_7</anchor><h3 id="_7">Переменное число параметров</h3>
<p>Т.к. "собственный" объект <strong>arguments</strong> не доступен внутри стрелочной функции (значение <strong>arguments</strong> лексически связано со значением <strong>arguments</strong> традиционной функции внутри которой стрелочная функция была объявлена), для стрелочных функций с переменным числом параметров нужно использовать <strong>rest</strong> паттерн из <em>шаблонов деструктуризации</em>. Пример:</p>
<br /><source lang="javascript">var getTempItems = (...rest) =&gt; rest;
// эквивалент
var getTempItems = function() { return [].slice.apply(arguments) };
</source>
<anchor>_8</anchor><h3 id="_8">Шаблон деструктуризации в качестве параметра</h3>
<p><em>Шаблоны деструктуризации мы не рассматриваем в рамках данной статьи - вы можете почитать про них в статье <a href="http://habrahabr.ru/post/175371/">Обзор ECMAScript 6, следующей версии JavaScript</a>, хотя информация из этой статьи частично устарела.</em></p>
<br><p>Как видно из предыдущего примера, несмотря на то, что у стрелочной функции всего один аргумент, всё равно необходимо использовать круглые скобки при использовании <em>шаблонов деструктуризации</em> как единственного параметра функции. Примеры с другими <em>шаблонами</em>:</p>
<br /><source lang="javascript">var a = ({a}) =&gt; a;
var b = ([b]) =&gt; b;
</source>
<br /><anchor>_9</anchor><h2 id="_9">Использование стрелочных функций</h2><hr />
<anchor>_10</anchor><h3 id="_10">Установка контекста</h3>
<p>Одним из частых сценариев в JavaScript является установка правильного значения <strong>this</strong> внутри функции (связывание). Поскольку значение <strong>this</strong> может быть изменено, в зависимости от контекста исполнения функции, возможно ошибочно воздействовать на один объект, когда вы имели ввиду совершенно другой. Посмотрите на следующий пример:</p>
<br /><source lang="javascript">var pageHandler = {
    id: &quot;123456&quot;
    , init: function() {
        document.addEventListener(&quot;click&quot;, function(event) {
            this.doSomething(event.type);     // ошибка
        });
    }
    , doSomething: function(type) { console.log(&quot;Handling &quot; + type  + &quot; for &quot; + this.id) }
};
</source>
<p>В приведённом коде, объект <code>pageHandler</code> должен обрабатывать клики на странице. Метод <code>init()</code> навешивает обработчик на нужное событие, который внутри себя вызывает <code>this.doSomething()</code>. Однако, код отработает неправильно. Ссылка на <code>this.doSomething()</code> не валидна, поскольку <strong>this</strong> указывает на объект <code>document</code> внутри обработчика события вместо планируемого <code>pageHandler</code>. При попытке выполнить этот код, вы получите ошибку, поскольку объект <code>document</code> не имеет метода <code>doSomething</code>.</p>
<br><p>Вы можете завязать значение <strong>this</strong> на объекте <code>pageHandler</code> используя <code>handleEvent</code> или вызвав у функции стандартный метод <code>bind()</code>:</p>
<br /><source lang="javascript">var pageHandler = {
    id: &quot;123456&quot;
    , init: function() {
        document.addEventListener(&quot;click&quot;, (function(event) {
            this.doSomething(event.type);     // error
        }).bind(this));
    }
    , doSomething: function(type) { console.log(&quot;Handling &quot; + type  + &quot; for &quot; + this.id) }
};
</source>
<p>Теперь код работает так, как и задумывалось, но выглядит более громоздко. Кроме того, вызывая <code>bind(this)</code> вы каждый раз создаёте новую функцию, значение <strong>this</strong> которой завязано на значении <code>pageHandler</code>, но зато код работает так, как вы задумывали.</p>
<br><p>Стрелочные функции решают проблему более элегантным способом, поскольку используют лексическое связывание значения <strong>this</strong> (а также <strong>super</strong> и <strong>arguments</strong>) и его значение определяется значением <strong>this</strong> в том месте, где стрелочная функция была создана. Например:</p>
<br /><source lang="javascript">var pageHandler = {
    id: &quot;123456&quot;
    , init: function() {
        document.addEventListener(&quot;click&quot;, event =&gt; this.doSomething(event.type));
    }
    , doSomething: function(type) { console.log(&quot;Handling &quot; + type  + &quot; for &quot; + this.id) }
};
</source>
<p>В этом примере, обработчик это стрелочная функция в которой вызывается <code>this.doSomething()</code>. Значение <strong>this</strong> будет тем же, что и в функции <code>init()</code>, и код в данном примере отработает правильно, аналогично тому, который использовал <code>bind()</code>. Вне зависимости от того, возвращает вызов <code>this.doSomething()</code> значение или нет, выражение внутри тела стрелочной функции не нужно обрамлять в фигурные скобки.</p>
<br><p>Кроме того, пример выше ещё и эффективнее вызова <code>bind()</code>, потому что для браузера он аналогичен следующему коду:</p>
<br /><source lang="javascript">var pageHandler = {
    id: &quot;123456&quot;
    , init: function() {
        var self = this;
        document.addEventListener(&quot;click&quot;, function(event) {
            return self.doSomething(event.type)
        });
    }
    , doSomething: function(type) { console.log(&quot;Handling &quot; + type  + &quot; for &quot; + this.id) }
};
</source>
<p>Т.е. не происходит создание новой функции, как в случае с вызовом <code>bind()</code>.</p>
<br /><anchor>_11</anchor><h3 id="_11">"Прокидывание" контекста между несколькими вызовами</h3>
<p>Очевидно, что можно вкладывать одну стрелочную функцию в другую, тем самым "прокидывая" значение <strong>this</strong> через них:</p>
<br /><source lang="javascript">var obj = {
    arr1: [1, 2, 3]
    , arr2: ['a', 'b', 'c']
    , concatenate: function(a, b){ return a + &quot;|&quot; + b }
    , intersection: function() {
        return this.arr1.reduce( (sum, v1) =&gt; // arrow function 1
            this.arr2.reduce( (sum, v2) =&gt; { // arrow function 2
                sum.push( this.concatenate( v1, v2 ) )
                return sum;
            }
            , sum )
        , [] )
    }
};
var arrSum = obj.intersection();//['1|a', '1|b', '1|c', '2|a', '2|b', '2|c', '3|a', '3|b', '3|c']
</source>
<br /><anchor>_12</anchor><h3 id="_12">Использование в качестве аргумента</h3>
<p>Короткий синтаксис стрелочных функций делает их идеальными кандидатами на передачу в качестве аргументов в вызов других функций. Например, если вы хотите отсортировать массив, вы обычно пишите что-то типа такого:</p>
<br /><source lang="javascript">var result = values.sort(function(a, b) { return a - b });
</source>
<p>Довольно многословно для простой операции. Сравните с короткой записью стрелочной функции:</p>
<br /><source lang="javascript">var result = values.sort((a, b) =&gt; a - b);
</source>
<p>Использование таких методов как массивные <code>sort()</code>, <code>map()</code>, <code>reduce()</code> и т.д., может быть упрощено с использованием короткого синтаксиса стрелочной функции.</p>
<br /><anchor>_13</anchor><h2 id="_13">Другие особенности стрелочных функций</h2><hr />
<p>Несмотря на то, что стрелочные функции отличаются от традиционных функций, у них есть общие черты:</p>
<ul>
<li>Оператор <code>typeof</code> вернёт "function" для стрелочной функции</li>
<li>Стрелочная функция также экземпляр "класса" Function, поэтому <code>instanceof</code> сработает также как и с традиционной функцией</li>
<li>Вы всё ещё можете использовать методы <code>call()</code>, <code>apply()</code>, и <code>bind()</code>, однако помните, что они не будут влиять на значение <strong>this</strong></li>
<li>Вы можете использовать метод <code>toMethod()</code>, однако он не будет менять значение <strong>super</strong> (<em>метод <code>toMethod()</code> введён в es6 и не рассматривается в рамках данной статьи</em>).</li>
</ul>
<p>Существенным отличием от традиционных функций является то, что попытка вызвать стрелочную функцию с указанием оператора <strong>new</strong> вызовет ошибку исполнения.</p>
<br /><anchor>_14</anchor><h2 id="_14">Итог</h2><hr />
<p>Стрелочные функции это одно из интереснейших нововведений в ECMAScript 6, которое, имея краткий синтаксис определения, упростит передачу функций в качестве значения параметра другой функции.</p>
<br><p>Лаконичный синтаксис позволит писать сложные вещи <del>ещё сложнее</del>проще. Например, так будет выглядеть генератор идентификаторов (который на es5 выглядит <a href="http://google.github.io/traceur-compiler/demo/repl.html#var%20idGen%20%3D%20(start%20%3D%200%2C%20id%20%3D%20start%2C%20reset%20%3D%20(newId%20%3D%20start)%20%3D%3E%20id%20%3D%20newId%2C%20next%20%3D%20()%20%3D%3E%20id%2B%2B)%20%3D%3E%0A%09(%7Breset%2C%20next%7D)%3B%0A%0Avar%20gen%20%3D%20idGen(100)%3B%0Aconsole.log(gen.next()%2C%20gen.next()%2C%20gen.reset(10)%2C%20gen.next())%3B%2F%2F100%20101%2010%2010">куда многословней</a>):</p>
<br /><source lang="javascript">let idGen = (start = 0, id = start, reset = (newId = start) =&gt; id = newId, next = () =&gt; id++) =&gt;
    ({reset, next});

let gen = idGen(100);
console.log(gen.next(), gen.next(), gen.reset(10), gen.next());//100 101 10 10
</source>
<p>А лексическое связывание закроет один из самых больших источников боли и разочарования для разработчиков, а так же улучшит производительность за счёт оптимизации на уровне js-движка.</p>
<p><img align="right" alt="Madness in FF" src="http://habrastorage.org/files/5c2/f4a/9e2/5c2f4a9e241148508eb78557063afb46.png" title="Madness in FF" /></p>
<p>Если вы хотите попробовать стрелочные функции, вы можете выполнить примеры выше в консоли Firefox, который на данный момент (02.2014 FF28) почти полноценно поддерживает стрелочные функции (FF28 неправильно вычисляет значение <strong>arguments</strong>).</p>
<br>
<p>Также вы можете попробовать стрелочные функции и другие возможности es6 в <a href="http://google.github.io/traceur-compiler/demo/repl.html">онлайн трансляторе Traceur</a>. </p>